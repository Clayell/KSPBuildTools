name: update-version

inputs:
  version-string:
    description: a version in the form major.minor.build.patch, OR one of "--major", "--minor", "--patch" to increment based on the most recent entry in the changelog
    type: string
  template-extension:
    type: string
    default: .versiontemplate
  files:
    type: string
  ksp-build-tools-root:
    type: string
    default: tmp/kspbuildtools #note this is relative to the *mod*'s repository
  changelog-input-file:
    type: string
    default: CHANGELOG.md
  changelog-output-file:
    type: string

outputs:
  version-string:
    value: ${{ steps.result.outputs.version-string }}

runs:
  using: composite
  steps:
    - name: checkout kspbuildtools
      uses: actions/checkout@v4
      with:
        repository: KSPModdingLibs/KSPBuildTools
        path: ${{inputs.ksp-build-tools-root}}
        sparse-checkout: update-version.sh
        sparse-checkout-cone-mode: false

    - name: update-changelog
      working-directory: ${{ github.workspace }}
      if: ${{ hashFiles( inputs.changelog-input-file ) != '' }}
      shell: bash
      env:
        YACLOG_PATH: ${{ inputs.changelog-input-file }}
        VERSION_STRING: ${{ inputs.version-string }}
      run: |
        python -m pip install --upgrade pip
        python -m pip install yaclog yaclog-ksp
        LAST_VER="$(yaclog show -n)"
        if ["$LAST_VER" != "Unreleased"]; then
          yaclog entry -p "There is nothing permanent except change"
        fi
        yaclog release -f ${{ inputs.version-string }}
        VERSION_STRING=$(yaclog show -n)
        echo "VERSION_STRING=$VERSION_STRING" >> "$GITHUB_ENV"
        yaclog-ksp -n ${{ github.event.repository.name }} -o ${{ inputs.changelog-output-file }}
        git add ${{ inputs.changelog-output-file }} ${{ inputs.changelog-input-file }}

    - name: update version
      id: result
      working-directory: ${{ github.workspace }}
      shell: bash
      run: |
        SCRIPT="${{inputs.ksp-build-tools-root}}/update-version.sh"
        chmod +x $SCRIPT
        $SCRIPT -g true -d true $VERSION_STRING ${{inputs.template-extension}} ${{inputs.files}}
        echo "version-string=$VERSION_STRING" >> "$GITHUB_OUTPUT"

