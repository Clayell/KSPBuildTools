name: Update Version
description: Uses [yaclog](https://yaclog.readthedocs.io/en/latest/index.html) and [yaclog-ksp](https://pypi.org/project/yaclog-ksp/) to update a changelog and get release notes. Then runs `update-version.sh` to replace version tokens in several text files.  All modifications will be staged to git but not committed.

inputs:
  version-string:
    description: A version number in major.minor.patch.build form, or one of the special strings `--major` `--minor` `--patch` which will increment the version based on the most recent entry in the changelog file.
    required: true
  template-extension:
    default: .versiontemplate
    description: Corresponds to the input to `update-version.sh`.
  files:
    description: Corresponds to the input to `update-version.sh`.
  ksp-build-tools-root:
    default: tmp/kspbuildtools #note this is relative to the *mod*'s repository
    description: Where to download `update-version.sh`.
  changelog-input-file:
    default: CHANGELOG.md
    description: The name of a changelog file to use.  Should be formatted according to [Keep a Changelog](https://keepachangelog.com/en/1.1.0/), with a `## Unreleased` section at the top for changes that are pending release.  `yaclog release` will be invoked which replaces the `## Unreleased` section with the version number and the date stamp.
  changelog-output-file:
    description: If specified, this action will run `yaclog-ksp` on the changelog input file which generates a changelog .cfg file suitable for [Kerbal Changelog](https://github.com/HebaruSan/KerbalChangelog/blob/master/README.md).  As such, `changelog-output-file` should be somewhere in your mod's artifact path so that it will be included when the mod is installed.
  release-notes-output-file:
    default: tmp/release-notes.md
    description: If specified, uses `yaclog` to save the most recent changelog info in Markdown format to this file.  This can then be used by the [`assemble-release` action](#assemble-release).

outputs:
  version-string:
    value: ${{ steps.result.outputs.version-string }}
    description: The final version string
  release-notes-output-file:
    value: ${{ inputs.release-notes-output-file }}
    description: The path to the release notes file

runs:
  using: composite
  steps:
    - name: checkout kspbuildtools
      uses: actions/checkout@v4
      with:
        repository: KSPModdingLibs/KSPBuildTools
        path: ${{inputs.ksp-build-tools-root}}
        sparse-checkout: update-version.sh
        sparse-checkout-cone-mode: false

    - name: update-changelog
      working-directory: ${{ github.workspace }}
      if: ${{ hashFiles( inputs.changelog-input-file ) != '' }}
      shell: bash
      env:
        YACLOG_PATH: ${{ inputs.changelog-input-file }}
        VERSION_STRING: ${{ inputs.version-string }}
      run: |
        python -m pip install --upgrade pip
        python -m pip install yaclog yaclog-ksp
        LAST_VER=$(yaclog show -n)
        if [ $LAST_VER != "Unreleased" ]; then
          yaclog entry -p "There is nothing permanent except change"
        fi
        yaclog release -f ${{ inputs.version-string }}
        VERSION_STRING=$(yaclog show -n)
        yaclog show -mb > ${{ inputs.release-notes-output-file }}
        echo "VERSION_STRING=$VERSION_STRING" >> "$GITHUB_ENV"
        echo "RELEASE_NOTES_FILE=${{ inputs.release-notes-output-file }}" >> "$GITHUB_ENV"
        git add ${{ inputs.changelog-input-file }}

    - name: write-changelog-output
      working-directory: ${{ github.workspace }}
      if: ${{ inputs.changelog-output-file != '' }}
      shell: bash
      run: |
        yaclog-ksp -n ${{ github.event.repository.name }} -o ${{ inputs.changelog-output-file }}
        git add ${{ inputs.changelog-output-file }}

    - name: update version
      id: result
      working-directory: ${{ github.workspace }}
      shell: bash
      run: |
        SCRIPT="${{inputs.ksp-build-tools-root}}/update-version.sh"
        chmod +x $SCRIPT
        $SCRIPT -g true -d true $VERSION_STRING ${{inputs.template-extension}} ${{inputs.files}}
        echo "version-string=$VERSION_STRING" >> "$GITHUB_OUTPUT"

